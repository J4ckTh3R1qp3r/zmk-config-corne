/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    chain-length = <24>;
};

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
        zmk,battery = &vbatt;
    };

    vbatt: vbatt {
        compatible = "zmk,battery-nrf-vddh";
        label = "VBATT";
    };
    behaviors {
        //17,14,13,25,26,27,28,38
        grp: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp G>, <&kp LG(G)>, <&kp LG(LS(G))>;
        };
        sav: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp S>, <&kp LG(S)>;
        };
        auto: tap_dance_mod_tap_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LSHFT A>, <&kp LS(A)>;
        };
        und: tap_dance_mod_tap_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL Z>, <&kp LG(Z)>;
        };
        cut: tap_dance_mod_tap_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp X>, <&kp LG(X)>;
        };
        cop: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C>, <&kp LG(C)>;
        };
        pst: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp V>, <&kp LG(V)>;
        };
        l1s: tap_dance_mod_tap_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 2>, <&kp RET>;
        };
        pbracket: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp LEFT_BRACKET>;
        };
        mbracket: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;
        };
        commads: tap_dance_mod_tap_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt QUESTION COMMA>, <&kp KP_COMMA>;
        };
        dotds: tap_dance_mod_tap_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt EXCL DOT>, <&kp KP_DOT>;
        };
        minusds: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp KP_MINUS>, <&kp KP_SLASH>;
        };
        plusds: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        };
        semids: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&kp SQT>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
                        bindings = <
                        &mt LALT Q  &kp W       &kp E     &kp R     &kp T         &mt EXCL Y      &mt QUESTION U        &kp I                    &kp O                  &mt LEFT_BRACKET P
                        &mt LSHFT A &kp S       &kp D     &kp F     &kp G         &kp H           &kp J                 &kp K                    &kp L                  &mt SQT SEMI
                        &mt LCTRL Z &kp X       &kp C     &kp V     &kp B         &kp N           &mt RIGHT_BRACKET M   &mt LS(NUMBER_6) COMMA   &mt LS(NUMBER_7) DOT   &kp FSLH
                                                &l1s      &kp LGUI  &lt 2 SPACE   &lt 2 RET       &kp LSHFT             &mo 1
                        >;
                };
                lower_layer {
                        bindings = <
                        &kp LALT   &mt RG(PERIOD) NUMBER_7            &kp N8                      &kp N9                              &kp N0      &kp BACKSLASH       &kp LEFT_BRACKET      &kp RIGHT_BRACKET           &kp PERCENT            &kp RG(C_AL_LOCK)
                        &kp LSHFT  &mt RG(RS(RC(NUMBER_4))) NUMBER_4  &mt RG(RA(LEFT_BRACKET)) N5 &mt RG(RA(RIGHT_BRACKET)) NUMBER_6  &kp MINUS   &mt TILDE SQT       &kp LEFT_PARENTHESIS  &mt HASH RIGHT_PARENTHESIS  &mt CARET AMPERSAND    &kp DOLLAR
                        &kp LCTRL  &kp NUMBER_1                       &kp NUMBER_2                &kp NUMBER_3                        &kp EQUAL   &kp UNDER           &kp LEFT_BRACE        &kp RIGHT_BRACE             &kp SEMICOLON          &kp LG(SPACE)
                                                                      &trans                      &trans                              &trans      &trans              &trans                &trans
                        >;
                };
                raise_layer {
                        bindings = <
                        &kp LALT    &kp TAB         &kp UP_ARROW    &none            &kp BACKSPACE        &kp K_MUTE         &kp C_VOLUME_DOWN &kp C_VOLUME_UP    &none            &kp BACKSPACE   
                        &kp LSHFT   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp ESCAPE           &none              &none             &none              &none            &none  
                        &kp LCTRL   &none           &none           &none            &none                &ext_power EP_TOG  &none             &none              &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  
                                                    &trans          &trans           &trans               &trans             &trans            &trans
                        >;
                };

    };
};
